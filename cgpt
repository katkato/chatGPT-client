#!/usr/bin/env python3

import argparse
import os
import openai
import subprocess
import signal

# Set up signal handlers
def exit_gracefully(signal, frame):
    print("\nExiting...")
    exit(0)

signal.signal(signal.SIGINT, exit_gracefully)
signal.signal(signal.SIGTERM, exit_gracefully)


# Define a function to set the API key as an environment variable
def set_api_key(api_key):
    
    # Add the API key to the .bashrc file 
    with open(os.path.expanduser(f"/home/{os.environ['USER']}/.bashrc"), "a") as f:
        f.write(f"\nexport OPENAI_API_KEY={api_key}\n")
     
    print("Please relaunch terminal")

# Define a function to send a prompt to ChatGPT and get a response
def ask_gpt(prompt):
    response = openai.Completion.create(
        engine="text-davinci-003", # specify the engine you want to use
        prompt=prompt,
        max_tokens=4000, # specify the length of the response
        n=1, # specify the number of responses to generate
        stop=None, # specify a stopping sequence for the response, if any
        temperature=0.7 # specify the creativity of the response
    )
    message = response.choices[0].text.strip()
    return message

# Define a function for interactive mode
def interactive_mode(with_context):
    print("Type 'exit' to quit.")
    context = ""
    context_list = []
    while True:
        # Get a question from the user   
        prompt = input("You: ")
        if prompt.lower() == "exit":
            break
        if with_context:
            context += prompt + "\n"  
            context_list.append(prompt)
            if len(context_list) > 10:
                context = context[len(context_list[0])+1+len(context_list[1])+1:]
                print(f"before{context_list}")
                del context_list[0]
                del context_list[0]
                print(f"after{context_list}")
            prompt = context

        response = ask_gpt(prompt)
        if with_context:
            context += response + "\n"
            context_list.append(response)

        # Print the response in green
        print("\033[32mChatGPT:\033[0m", response)


# Parse command line arguments
parser = argparse.ArgumentParser(description="Chat with ChatGPT.")
parser.add_argument("-it", "--interactive", action="store_true", help="enable interactive mode")
parser.add_argument("-itc", "--interactive_context", action="store_true", help="enable interactive mode with context")
parser.add_argument("-sk", "--setkey", metavar="API_KEY", help="set the OpenAI API key and exit")
args = parser.parse_args()

# If the user specified -sk, set the API key and exit
if args.setkey:
    set_api_key(args.setkey)
    print(f"OpenAI API key set to {args.setkey}.")
    exit()

# Get your API key from the environment variable
api_key = os.environ.get("OPENAI_API_KEY")

# If the API key is not set, prompt the user to enter the key
if not api_key:
    print("No OpenAI API key found. Please set your API key using the -sk option or set it as an environment variable.\n")
    print("To get an API key, please go to https://beta.openai.com/account/api-keys")
    exit()

# Set your API key
openai.api_key = api_key

# If the user specified interactive mode, run the interactive mode function
if args.interactive:
    interactive_mode(False)
elif args.interactive_context:
    interactive_mode(True)
else:
    # Get a question from the user
    question = input("\033[34mWhat's your question?\033[0m")
    # Send the question to ChatGPT and get a response
    response = ask_gpt(question)
    # Print the response
    print(response)
